import React, { useEffect, useState } from "react";
import { useSpring, animated as a } from "react-spring";
import parseHtml from "html-react-parser";
import he from "he";
import { useParams, Redirect } from "react-router-dom";

const urlPrefix = new URL("http://yangyang.blog/articles/wp-json/wp/v2/posts/");

const p =
  '<p>Each year at ITP, the residents make a new archive site of the current year’s students’ thesis projects.</p>\n<p>I love front-end development and feel honored that I’m in this year’s team.</p>\n<h3>Before We Start</h3>\n<p>I had a background at design, so I was also involved in the early ideation of the design progress. I’m happy that we came up with some beautiful ideas, which were absent in previous years’ ITP Archive.</p>\n<p><img data-attachment-id="1417" data-permalink="http://yangyang.blog/articles/2020/04/thesis-archive-2020/img_2895/" data-orig-file="https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?fit=2560%2C1920" data-orig-size="2560,1920" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;2.4&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;iPhone X&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1584036353&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;6&quot;,&quot;iso&quot;:&quot;125&quot;,&quot;shutter_speed&quot;:&quot;0.009009009009009&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="IMG_2895" data-image-description data-medium-file="https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?fit=300%2C225" data-large-file="https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?fit=580%2C435" src="https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895.jpg?resize=580%2C435" alt="Early ideation process with my team." width="580" height="435" class="size-large wp-image-1417" srcset="https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?resize=1024%2C768 1024w, https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?resize=300%2C225 300w, https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?resize=768%2C576 768w, https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?resize=1536%2C1152 1536w, https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?resize=2048%2C1536 2048w, https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?resize=1200%2C900 1200w, https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?resize=1980%2C1485 1980w, https://i1.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/IMG_2895-scaled.jpg?w=1740 1740w" sizes="(max-width: 580px) 100vw, 580px" data-recalc-dims="1"> Early ideation process with my team.[/caption]</p>\n<p>My favorite two are the Infinite Scrolling Gallery and the Random, which are also the most challenging ones.</p>\n\n<p>When Dan and I started to discuss what framework should we choose, we both agree, not P5js, although ITP is so much involved with P5js. We love P5js, but it is not performative and not very accessible. We decided to choose ReactJS and TypeScript, and for the beautiful animations, we’re going to use React-Spring.</p>\n<h3>The Hard Parts</h3>\n<h4>Infinite Gallery</h4>\n<p>The first challenge, making the infinite gallery performative.</p>\n<p>It’s easy to build a grid of cards, and then as the use navigating, just let the matrix grow. We tested that if there are over 70 projects on the page, it’ll start getting choppy.</p>\n<p>We know we should only render the cards that are in the user’s viewport, but how? We tried different solutions, the best one is:</p>\n<p>[diagram]</p>\n<p>We create a <code>div</code>, our canvas. Then as the user navigating, we move the canvas by updating the <code>translate()</code>. Next, we keep tracking how far the canvas has moved, then render cards at the area that only covers the user’s viewport.</p>\n<figure id="attachment_1429" aria-describedby="caption-attachment-1429" class="wp-caption alignnone"><img data-attachment-id="1429" data-permalink="http://yangyang.blog/articles/2020/04/thesis-archive-2020/screen-shot-2020-04-27-at-8-19-32-pm/" data-orig-file="https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?fit=3072%2C1712" data-orig-size="3072,1712" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Profiling the thesis archive page." data-image-description data-medium-file="https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?fit=300%2C167" data-large-file="https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?fit=580%2C323" src="https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?resize=580%2C323" alt="Chrome Dev Tool Profiling the thesis archive page." width="580" height="323" class="size-large wp-image-1429" srcset="https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?resize=1024%2C571 1024w, https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?resize=300%2C167 300w, https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?resize=768%2C428 768w, https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?resize=1536%2C856 1536w, https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?resize=2048%2C1141 2048w, https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?resize=1200%2C669 1200w, https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?resize=1980%2C1103 1980w, https://i0.wp.com/yangyang.blog/articles/wp-content/uploads/2020/04/Screen-Shot-2020-04-27-at-8.19.32-PM.png?w=1740 1740w" sizes="(max-width: 580px) 100vw, 580px" data-recalc-dims="1"><figcaption id="caption-attachment-1429" class="wp-caption-text">When scrolling, most of the frames are rendered in 20 ms.</figcaption></figure><p>The result is pretty amazing. With the help from <code>React.memo</code>, it only takes the browser 20ms to render each frame.</p>\n<h4>Random Reading.</h4>\n<p>ITP projects are usually bizarre, and you will never know what you’re expecting. So random reading fits this scenario seamlessly.</p>\n<p>Speak about seamless; how can we make the randomizing process smooth?</p>\n<p>Imagine you’re in a theater, what should we do to smooth the transition to next act?</p>\n<p>Well, my first idea is to use a curtain. Just like in a theater, the drape lowered, then the set gets changed, then the curtain rises, the audiences get a brand new scene.</p>\n<p>It’s a tricky problem when dealing with routers.<br>After I lower the drape, if the app jumps out of the current page, I lost control of the curtain.<br>I don’t want to time the animation, is there an elegant way I can know when the curtain is down about to go up?</p>\n<p>Luckily the beta version of React-Spring leverage async functions to achieve chained transitions. like so:</p>\n<pre><code>async next =&gt; {\n    await next({...stage1AnimationArgs});\n    await next({...stage2AnimationArgs});\n    await next({...stage3AnimationArgs});\n}\n</code></pre>\n<p>Then I can insert <code>history.push(path)</code> in between those animations, followed by rendering a detail page underneath the curtain!</p>\n\n<p>Looks pretty smooth, yay!</p>\n<h4>DIY Redux</h4>\n<p>I wrote a module, Message Hub, that displays some messages to the users. I want that any other component can add notes into the hub, but I don’t want to pass a message state setter as props from the root down to any other components. Redux is an excellent fit for this scenario, but this project doesn’t have such a super crazy state to manage,</p>\n<p>How about DIY? A super lightweight one, a central store that components can subscribe to it?</p>\n<p>Well, with React hooks, I did it, and it worked! The <code>connect</code> function is a tricky one, which is a HOC but different at the same time.</p>\n<p>I have another article about how I did it. Please <a href="http://yangyang.blog/articles/2020/04/diy-a-redux-with-react-hooks-and-typescript/">click here to read</a>,</p>\n<h4>TypeScript</h4>\n<p>This project is my first one using TypeScript. I must say I loved it so much!</p>\n<p>Sometimes it’s frustrating that when dealing with third-party libraries that don’t document their types very well, and the error message is super long and hard to read. But once I get it, I can’t go back. Back in JavaScript, sometimes it was so hard to find a hidden bug, but now they don’t appear at all!</p>\n<h3>The End</h3>\n<p>I learned so much from this project and also from Dan’s code review. Thanks to this project for broadening my skillsets and improving my overall coding crafts.</p>\n<div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-136164901-1412-5ed5c28788da6" data-src="https://widgets.wp.com/likes/#blog_id=136164901&amp;post_id=1412&amp;origin=yangyang.blog&amp;obj_id=136164901-1412-5ed5c28788da6" data-name="like-post-frame-136164901-1412-5ed5c28788da6">\n<div class="likes-widget-placeholder post-likes-widget-placeholder"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div>\n</div>\n\n';

interface post {}

const ProjectDetail = () => {
  const { id } = useParams<{ id?: string }>();
  let [post, setPost] = useState<any>(null);

  useEffect(() => {
    fetch(urlPrefix + id)
      .then((res) => res.json())
      .then((json) => {
        setPost(json);
        console.log(json);
        return json;
      });
  }, []);

  if (post === null) return <div>loading</div>;

  return <div>{parseHtml(p)}</div>;
};

export default ProjectDetail;
